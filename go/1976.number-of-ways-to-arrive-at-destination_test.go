package main

import "testing"

func Test_countPaths(t *testing.T) {
	tests := []struct {
		name  string
		n     int
		roads [][]int
		want  int
	}{
		{
			n: 34,
			roads: [][]int{
				{1, 0, 9611}, {0, 2, 13741}, {2, 1, 4130}, {2, 3, 2339},
				{3, 0, 16080}, {1, 4, 9725}, {0, 4, 19336}, {3, 4, 3256},
				{4, 2, 5595}, {5, 4, 6224}, {6, 2, 1303}, {1, 6, 5433},
				{7, 6, 10824}, {4, 7, 6532}, {5, 7, 308}, {7, 1, 16257},
				{6, 8, 14961}, {8, 4, 10669}, {8, 0, 30005}, {5, 8, 4445},
				{8, 3, 13925}, {8, 7, 4137}, {2, 8, 16264}, {9, 4, 12915},
				{0, 9, 32251}, {8, 9, 2246}, {10, 7, 14204}, {0, 10, 40072},
				{6, 10, 25028}, {10, 8, 10067}, {10, 3, 23992}, {10, 2, 26331},
				{10, 1, 30461}, {4, 10, 20736}, {5, 10, 14512}, {9, 10, 7821},
				{11, 4, 3381}, {12, 4, 27123}, {9, 12, 14208}, {10, 12, 6387},
				{8, 12, 16454}, {12, 0, 46459}, {7, 12, 20591}, {12, 5, 20899},
				{2, 12, 32718}, {12, 11, 23742}, {1, 12, 36848}, {6, 12, 31415},
				{5, 13, 25075}, {13, 10, 10563}, {3, 13, 34555}, {13, 12, 4176},
				{13, 8, 20630}, {13, 1, 41024}, {13, 11, 27918}, {13, 7, 24767},
				{4, 13, 31299}, {2, 13, 36894}, {10, 14, 8784}, {12, 14, 2397},
				{4, 14, 29520}, {6, 14, 33812}, {9, 14, 16605}, {14, 3, 32776},
				{5, 14, 23296}, {14, 2, 35115}, {8, 14, 18851}, {7, 14, 22988},
				{10, 15, 9236}, {15, 3, 33228}, {15, 0, 49308}, {15, 12, 2849},
				{4, 16, 41221}, {16, 8, 30552}, {10, 16, 20485}, {16, 11, 37840},
				{16, 6, 45513}, {16, 14, 11701}, {3, 16, 44477}, {1, 16, 50946},
				{16, 5, 34997}, {16, 7, 34689}, {12, 16, 14098}, {16, 0, 60557},
				{16, 13, 9922}, {2, 16, 46816}, {16, 9, 28306}, {17, 9, 36735},
				{17, 3, 52906}, {16, 17, 8429}, {8, 17, 38981}, {7, 17, 43118},
				{6, 17, 53942}, {4, 17, 49650}, {17, 14, 20130}, {17, 13, 18351},
				{17, 10, 28914}, {17, 11, 46269}, {1, 17, 59375}, {15, 17, 19678},
				{17, 12, 22527}, {15, 18, 27895}, {18, 12, 30744}, {18, 11, 54486},
				{18, 4, 57867}, {3, 18, 61123}, {18, 16, 16646}, {13, 18, 26568},
				{18, 8, 47198}, {1, 18, 67592}, {17, 18, 8217}, {0, 18, 77203},
				{6, 18, 62159}, {18, 14, 28347}, {19, 13, 32225}, {11, 19, 60143},
				{5, 19, 57300}, {19, 15, 33552}, {10, 19, 42788}, {6, 19, 67816},
				{7, 19, 56992}, {19, 18, 5657}, {19, 1, 73249}, {16, 19, 22303},
				{8, 19, 52855}, {17, 19, 13874}, {19, 3, 66780}, {19, 9, 50609},
				{19, 0, 82860}, {19, 4, 63524}, {4, 20, 69122}, {18, 20, 11255},
				{3, 20, 72378}, {11, 20, 65741}, {14, 20, 39602}, {10, 20, 48386},
				{1, 20, 78847}, {20, 5, 62898}, {20, 15, 39150}, {20, 19, 5598},
				{16, 20, 27901}, {12, 20, 41999}, {0, 20, 88458}, {8, 20, 58453},
				{20, 13, 37823}, {20, 7, 62590}, {9, 20, 56207}, {2, 20, 74717},
				{20, 17, 19472}, {17, 21, 26673}, {16, 21, 35102}, {3, 21, 79579},
				{21, 18, 18456}, {21, 9, 63408}, {21, 20, 7201}, {2, 21, 81918},
				{21, 11, 72942}, {14, 22, 50771}, {22, 19, 16767}, {22, 18, 22424},
				{22, 15, 50319}, {22, 13, 48992}, {22, 3, 83547}, {6, 22, 84583},
				{22, 5, 74067}, {22, 10, 59555}, {16, 22, 39070}, {22, 20, 11169},
				{22, 12, 53168}, {4, 22, 80291}, {22, 2, 85886}, {22, 8, 69622},
				{22, 21, 3968}, {22, 17, 30641}, {0, 22, 99627}, {11, 22, 76910},
				{22, 7, 73759}, {2, 23, 87059}, {23, 6, 85756}, {5, 23, 75240},
				{23, 21, 5141}, {9, 23, 68549}, {14, 23, 51944}, {20, 23, 12342},
				{1, 23, 91189}, {8, 23, 70795}, {11, 23, 78083}, {23, 13, 50165},
				{23, 22, 1173}, {12, 23, 54341}, {23, 3, 84720}, {23, 10, 60728},
				{23, 17, 31814}, {21, 24, 5622}, {14, 24, 52425}, {24, 20, 12823},
				{7, 24, 75413}, {24, 2, 87540}, {25, 1, 101404}, {13, 25, 60380},
				{25, 7, 85147}, {9, 25, 78764}, {15, 25, 61707}, {19, 25, 28155},
				{25, 22, 11388}, {25, 17, 42029}, {25, 5, 85455}, {16, 25, 50458},
				{25, 4, 91679}, {25, 23, 10215}, {25, 14, 62159}, {24, 25, 9734},
				{25, 21, 15356}, {25, 10, 70943}, {25, 20, 22557}, {3, 25, 94935},
				{0, 25, 111015}, {19, 26, 31787}, {14, 26, 65791}, {26, 3, 98567},
				{26, 15, 65339}, {26, 25, 3632}, {24, 26, 13366}, {9, 26, 82396},
				{18, 26, 37444}, {26, 17, 45661}, {26, 1, 105036}, {22, 26, 15020},
				{26, 5, 89087}, {10, 26, 74575}, {26, 2, 100906}, {11, 26, 91930},
				{13, 26, 64012}, {26, 12, 68188}, {26, 4, 95311}, {20, 26, 26189},
				{0, 26, 114647}, {26, 21, 18988}, {0, 27, 100248}, {21, 27, 4589},
				{2, 27, 86507}, {4, 27, 80912}, {27, 9, 67997}, {14, 27, 51392},
				{27, 15, 50940}, {27, 10, 60176}, {27, 11, 77531}, {27, 13, 49613},
				{0, 28, 124384}, {28, 12, 77925}, {28, 27, 24136}, {28, 26, 9737},
				{28, 10, 84312}, {28, 13, 73749}, {28, 16, 63827}, {20, 28, 35926},
				{28, 23, 23584}, {29, 6, 100376}, {29, 23, 14620}, {29, 17, 46434},
				{29, 25, 4405}, {22, 29, 15793}, {29, 15, 66112}, {5, 29, 89860},
				{0, 29, 115420}, {13, 29, 64785}, {29, 4, 96084}, {29, 19, 32560},
				{29, 21, 19761}, {29, 26, 773}, {11, 29, 92703}, {9, 29, 83169},
				{29, 18, 38217}, {29, 10, 75348}, {7, 29, 89552}, {1, 29, 105809},
				{29, 20, 26962}, {29, 16, 54863}, {12, 29, 68961}, {29, 2, 101679},
				{29, 24, 14139}, {4, 30, 111360}, {10, 30, 90624}, {30, 5, 105136},
				{30, 1, 121085}, {8, 30, 100691}, {28, 30, 6312}, {27, 30, 30448},
				{30, 24, 29415}, {30, 26, 16049}, {30, 12, 84237}, {6, 30, 115652},
				{30, 2, 116955}, {30, 14, 81840}, {30, 20, 42238}, {30, 29, 15276},
				{30, 9, 98445}, {30, 3, 114616}, {30, 16, 70139}, {21, 30, 35037},
				{30, 25, 19681}, {30, 13, 80061}, {18, 30, 53493}, {30, 11, 107979},
				{30, 15, 81388}, {30, 0, 130696}, {31, 16, 58739}, {31, 29, 3876},
				{6, 31, 104252}, {31, 2, 105555}, {31, 15, 69988}, {1, 32, 117525},
				{20, 32, 38678}, {7, 32, 101268}, {27, 32, 26888}, {25, 32, 16121},
				{29, 32, 11716}, {23, 32, 26336}, {32, 14, 78280}, {31, 32, 7840},
				{15, 32, 77828}, {32, 5, 101576}, {11, 32, 104419}, {12, 32, 80677},
				{23, 33, 30143}, {18, 33, 53740}, {33, 10, 90871}, {31, 33, 11647},
				{33, 21, 35284}, {33, 25, 19928}, {33, 32, 3807}, {33, 26, 16296},
			},
			want: 6347247,
		},

		{
			n: 31,
			roads: [][]int{
				{1, 0, 3720}, {0, 2, 7914}, {1, 3, 2340}, {3, 4, 1956},
				{1, 4, 4296}, {0, 4, 8016}, {4, 2, 102}, {1, 5, 13556},
				{5, 4, 9260}, {3, 5, 11216}, {5, 0, 17276}, {0, 6, 20787},
				{3, 6, 14727}, {6, 5, 3511}, {6, 4, 12771}, {7, 5, 8655},
				{0, 7, 25931}, {2, 7, 18017}, {7, 4, 17915}, {3, 7, 19871},
				{7, 6, 5144}, {3, 8, 21964}, {1, 8, 24304}, {8, 7, 2093},
				{0, 8, 28024}, {6, 9, 15601}, {9, 8, 8364}, {9, 7, 10457},
				{5, 9, 19112}, {3, 9, 30328}, {9, 4, 28372}, {10, 1, 29336},
				{7, 10, 7125}, {3, 10, 26996}, {11, 1, 40839}, {11, 9, 8171},
				{4, 11, 36543}, {11, 12, 5840}, {6, 12, 29612}, {2, 12, 42485},
				{12, 5, 33123}, {7, 12, 24468}, {5, 13, 33306}, {11, 13, 6023},
				{13, 8, 22558}, {13, 3, 44522}, {13, 0, 50582}, {6, 13, 29795},
				{13, 1, 46862}, {12, 13, 183}, {13, 2, 42668}, {10, 13, 17526},
				{7, 13, 24651}, {14, 7, 29499}, {4, 14, 47414}, {13, 14, 4848},
				{14, 0, 55430}, {5, 14, 38154}, {14, 6, 34643}, {14, 2, 47516},
				{14, 11, 10871}, {14, 12, 5031}, {9, 14, 19042}, {3, 14, 49370},
				{14, 10, 22374}, {8, 14, 27406}, {14, 1, 51710}, {4, 15, 47964},
				{1, 15, 52260}, {15, 7, 30049}, {15, 12, 5581}, {16, 12, 11809},
				{1, 16, 58488}, {5, 16, 44932}, {16, 10, 29152}, {16, 11, 17649},
				{9, 16, 25820}, {16, 14, 6778}, {16, 6, 41421}, {3, 16, 56148},
				{4, 16, 54192}, {8, 16, 34184}, {16, 7, 36277}, {0, 16, 62208},
				{16, 15, 6228}, {2, 17, 55341}, {17, 3, 57195}, {17, 15, 7275},
				{17, 1, 59535}, {17, 16, 1047}, {8, 17, 35231}, {17, 10, 30199},
				{17, 13, 12673}, {6, 17, 42468}, {17, 9, 26867}, {11, 17, 18696},
				{17, 0, 63255}, {4, 17, 55239}, {7, 17, 37324}, {17, 12, 12856},
				{14, 17, 7825}, {17, 5, 45979}, {18, 1, 37600}, {18, 10, 8264},
				{2, 19, 59981}, {18, 19, 26575}, {19, 6, 47108}, {19, 0, 67895},
				{10, 19, 34839}, {19, 13, 17313}, {17, 19, 4640}, {19, 1, 64175},
				{19, 3, 61835}, {17, 20, 690}, {20, 6, 43158}, {14, 20, 8515},
				{20, 3, 57885}, {12, 20, 13546}, {4, 20, 55929}, {16, 20, 1737},
				{18, 20, 22625}, {8, 20, 35921}, {21, 14, 14840}, {18, 21, 28950},
				{21, 10, 37214}, {20, 21, 6325}, {21, 5, 52994}, {21, 2, 62356},
				{3, 21, 64210}, {1, 21, 66550}, {21, 8, 42246}, {17, 21, 7015},
				{4, 21, 62254}, {0, 21, 70270}, {21, 12, 19871}, {6, 21, 49483},
				{15, 21, 14290}, {21, 11, 25711}, {21, 16, 8062}, {21, 9, 33882},
				{20, 22, 11603}, {22, 6, 54761}, {22, 18, 34228}, {22, 7, 49617},
				{22, 3, 69488}, {22, 1, 71828}, {12, 22, 25149}, {11, 22, 30989},
				{13, 22, 24966}, {2, 22, 67634}, {22, 14, 20118}, {21, 22, 5278},
				{19, 22, 7653}, {16, 22, 13340}, {9, 22, 39160}, {0, 22, 75548},
				{10, 22, 42492}, {22, 8, 47524}, {4, 22, 67532}, {15, 22, 19568},
				{22, 5, 58272}, {17, 22, 12293}, {23, 0, 75785}, {23, 12, 25386},
				{23, 6, 54998}, {23, 19, 7890}, {16, 23, 13577}, {23, 17, 12530},
				{2, 23, 67871}, {21, 23, 5515}, {23, 22, 237}, {7, 23, 49854},
				{5, 23, 58509}, {13, 23, 25203}, {23, 15, 19805}, {23, 3, 69725},
				{23, 9, 39397}, {23, 4, 67769}, {23, 10, 42729}, {23, 11, 31226},
				{14, 23, 20355}, {18, 23, 34465}, {20, 23, 11840}, {16, 24, 8938},
				{25, 12, 33599}, {5, 25, 66722}, {25, 10, 50942}, {14, 25, 28568},
				{25, 11, 39439}, {25, 3, 77938}, {2, 25, 76084}, {25, 17, 20743},
				{19, 25, 16103}, {0, 25, 83998}, {25, 13, 33416}, {23, 25, 8213},
				{1, 25, 80278}, {25, 7, 58067}, {25, 24, 12852}, {6, 26, 67490},
				{14, 26, 32847}, {26, 24, 17131}, {13, 26, 37695}, {26, 18, 46957},
				{9, 26, 51889}, {26, 19, 20382}, {26, 16, 26069}, {22, 26, 12729},
				{17, 26, 25022}, {26, 12, 37878}, {5, 26, 71001}, {26, 7, 62346},
				{26, 25, 4279}, {3, 26, 82217}, {20, 26, 24332}, {27, 14, 35787},
				{4, 27, 83201}, {20, 27, 27272}, {27, 16, 29009}, {2, 27, 83303},
				{27, 6, 70430}, {5, 27, 73941}, {27, 22, 15669}, {27, 26, 2940},
				{27, 15, 35237}, {24, 27, 20071}, {3, 27, 85157}, {27, 17, 27962},
				{21, 27, 20947}, {27, 23, 15432}, {1, 27, 87497}, {9, 27, 54829},
				{18, 27, 49897}, {27, 8, 63193}, {0, 27, 91217}, {7, 27, 65286},
				{10, 27, 58161}, {27, 11, 46658}, {27, 13, 40635}, {25, 27, 7219},
				{27, 19, 23322}, {27, 12, 40818}, {19, 28, 8167}, {22, 28, 514},
				{5, 28, 58786}, {8, 29, 65541}, {17, 29, 30310}, {27, 29, 2348},
				{29, 16, 31357}, {29, 23, 17780}, {21, 29, 23295}, {29, 9, 57177},
				{19, 29, 25670}, {0, 29, 93565}, {14, 29, 38135}, {5, 29, 76289},
				{22, 29, 18017}, {29, 25, 9567}, {28, 29, 17503}, {29, 18, 52245},
				{3, 29, 87505}, {29, 7, 67634}, {29, 4, 85549}, {26, 29, 5288},
				{30, 2, 5431},
			},
			want: 1,
		},

		{
			n: 7,
			roads: [][]int{
				{0, 6, 7}, {0, 1, 2}, {1, 2, 3}, {1, 3, 3}, {6, 3, 3}, {3, 5, 1}, {6, 5, 1}, {2, 5, 1}, {0, 4, 5}, {4, 6, 2},
			},
			want: 4,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := countPaths(tt.n, tt.roads); got != tt.want {
				t.Errorf("countPaths() = %v, want %v", got, tt.want)
			}
		})
	}
}
