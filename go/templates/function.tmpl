{{define "function"}}
  {{- $f := .}}

  func {{.TestName}}(t *testing.T) {
  {{- with .Receiver}}
    {{- if .IsStruct}}
      {{- if .Fields}}
        type fields struct {
        {{- range .Fields}}
          {{Field .}} {{.Type}}
        {{- end}}
        }
      {{- end}}
    {{- end}}
  {{- end}}
  tests := []struct {
  {{- range .TestParameters}}
    {{Param .}} {{.Type}}
  {{- end}}
  {{- with .Receiver}}
    {{- if and .IsStruct .Fields}}
      fields fields
    {{- else}}
      {{Receiver .}} {{.Type}}
    {{- end}}
  {{- end}}
  {{- range .TestResults}}
    {{Want .}} {{.Type}}
  {{- end}}
  {{- if .ReturnsError}}
    wantErr bool
  {{- end}}
  }{
  {},
  }
  for {{if (or .Subtests (not .IsNaked))}} _, tc := {{end}} range tests {
  tt := tc
  testName := fmt.Sprintf(
  "{{range $i, $e := .Parameters}}{{if eq $i 0}}%v{{else}}, %v{{end}}{{end}}",
  {{range $i, $el := .Parameters}}{{if $i}}, {{end}}{{if not .IsWriter}}tt.{{end}}{{Param .}}{{if .Type.IsVariadic}}...{{end}}{{end}},
    );

    {{- if .Subtests }}t.Run(testName, func(t *testing.T) { {{- end -}}
      {{- with .Receiver}}
        {{- if .IsStruct}}
          {{Receiver .}} := {{if .Type.IsStar}}&{{end}}{{.Type.Value}}{
          {{- range .Fields}}
            {{.Name}}: tt.fields.{{Field .}},
          {{- end}}
          }
        {{- end}}
      {{- end}}
      {{- range .Parameters}}
        {{- if .IsWriter}}
          {{Param .}} := &bytes.Buffer{}
        {{- end}}
      {{- end}}
      {{- if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
        {{template "results" $f}} {{template "call" $f}}
      {{- end}}
      {{- if .ReturnsError}}
        if {{if .OnlyReturnsError}} err := {{template "call" $f}}; {{end}} (err != nil) != tt.wantErr {
        t.Errorf("{{template "message" $f}} error = %v, wantErr %v", {{template "inputs" $f}} err, tt.wantErr)
        {{- if .TestResults}}
          {{if .Subtests }}return{{else}}continue{{end}}
          {{- end}}
          }
        {{- end}}
        {{- range .TestResults}}
          {{- if .IsWriter}}
            {{Got .}} := {{Param .}}.String()
            if {{Got .}} != tt.{{Want .}} {
          {{- else if .IsBasicType}}
            {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}
              if {{end}} {{Got .}} != tt.{{Want .}} {
            {{- else}}
              if {{if $f.OnlyReturnsOneValue}}{{Got .}} := {{template "inline" $f}}; {{end}} !reflect.DeepEqual({{Got .}}, tt.{{Want .}}) {
            {{- end}}
            t.Errorf("{{template "message" $f}} {{if $f.ReturnsMultiple}}{{Got .}} {{end}}= %v, want %v", {{template "inputs" $f}} {{Got .}}, tt.{{Want .}})
            }
          {{- end}}
          {{- if .Subtests }} }) {{- end -}}
            }
            }

          {{end}}
