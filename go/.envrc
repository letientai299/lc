# vim:set et sw=2 ts=2 tw=1000:
source_up

leetcode session -e go

xgrep() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    grep -E $*
  else
    grep -P $*
  fi
}
export_function xgrep

p() {
  id="$1"
  export LC_DOING="$1"
  leetcode show "$1" --gen --extra -l golang -vv
}

export_function p

# gen test
gt() {
  TARGET="$*"
  if [[ -z $TARGET ]]; then
    # find the new generated go file
    TARGET=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  fi
  echo "generate test for $TARGET"
  FUNC_NAME=$(cat $TARGET | egrep -wo 'func \w*' | sed 's/func //')
  echo "generate test for $FUNC_NAME"
  DIR=$(dirname $TARGET)
  TEMPLATE_DIR="$PWD/templates"
  cd $DIR && gotests -only $FUNC_NAME -i -template_dir $TEMPLATE_DIR -w .
}
export_function gt

# test watch
tw() {
  # find the new generated go file
  TARGET=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  echo $TARGET
  FUNC_NAME=$(cat $TARGET | egrep -wo 'func \w*' | sed 's/func //')
  echo $FUNC_NAME
  nodemon -w "." --ext go --exec "go test -v -run $FUNC_NAME ./... || exit 1" --delay 1s
}
export_function tw

# next, if call without any number, pick the next problem automatically
# otherwise, pick the given problem number
n() {
  NEXT_PROBLEM="$*"
  if [[ -z $NEXT_PROBLEM ]]; then
    LOCKED_EASY="(170|243|246|252|256|266|270|276|293|339|346|359|408|422|511|512|577|584|586|597|603|604|607|610|613|619|624|716|734|751|758|760|800)"

    # 401 - binary watch is hard
    # others are not supported for golang
    SKIPPED_PROBLEMS="(401|427|429|558|559|589|590|595|596|620|627|690)"

    # 703: OOP in golang
    # 705: OOP in golang
    # 706: OOP in golang
    # 707: OOP in golang
    BORED_PROBLEMS="(703|705|706|707|720|157)"
    NEXT_PROBLEM=$(leetcode ls -q eD | sed 's/^.*\[//' | awk '{print $1}' | tr -d ']' | grep -vE $LOCKED_EASY | grep -vE $SKIPPED_PROBLEMS | grep -vE $BORED_PROBLEMS | tail -n 1)
  fi
  p $NEXT_PROBLEM
  FILE=$(ls $NEXT_PROBLEM.*.go)
  printf '%s\n%s\n' "package main" "$(cat $FILE)" >$FILE
  gofmt -e -s -w $NEXT_PROBLEM.*.go
  gt $NEXT_PROBLEM.*.go
}

export_function n

now() {
  TARGET=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  nvim $TARGET
}

export_function now

c() {
  CODE=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  TEST=$(git ls-files --others --exclude-standard | grep "_test.go" | xgrep '\d+\..*\.go')
  goland $TEST $CODE
}
export_function c

sm() {
  CODE=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  leetcode submit $CODE
}

export_function sm
