source_up

xgrep(){
  if [[ "$OSTYPE" == "darwin"* ]]; then
    grep -E $*
  else
    grep -P $*
  fi
}
export_function xgrep

p() {
  id="$1"
  export LC_DOING="$1"
  leetcode show "$1" --gen --extra -l golang
}

export_function p

# gen test
gt() {
  # find the new generated go file
  TARGET=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  echo $TARGET
  FUNC_NAME=$(cat $TARGET | egrep -wo 'func \w*' | sed 's/func //')
  echo $FUNC_NAME
  gotests -only $FUNC_NAME -i -template_dir ./templates -w .
}
export_function gt


# test watch
tw() {
  # find the new generated go file
  TARGET=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  echo $TARGET
  FUNC_NAME=$(cat $TARGET | egrep -wo 'func \w*' | sed 's/func //')
  echo $FUNC_NAME
  nodemon -w "." --ext go --exec "go test -v -run $FUNC_NAME ./... || exit 1" --delay 1s
}
export_function tw

# next
n() {
  LOCKED_EASY="(157|170|243|246|252|256|266|270|276)"
  NEXT_PROBLEM=$(leetcode ls -q eD | awk '{print $3}' | tr -d ']' | grep -vE $LOCKED_EASY | tail -n 1)
  p $NEXT_PROBLEM
  FILE=$(ls $NEXT_PROBLEM.*.go)
  printf '%s\n%s\n' "package main" "$(cat $FILE)" >$FILE
  gofmt -e -s -w $NEXT_PROBLEM.*.go
}

export_function n

now(){
  TARGET=$(git ls-files --others --exclude-standard | grep -v "_test.go" | xgrep '\d+\..*\.go')
  nvim $TARGET
}

export_function now
